#!KAMAILIO
#
# sample config file for dispatcher module
# - load balancing of VoIP calls with round robin
# - no TPC listening
# - don't dispatch REGISTER and presence requests
#
# Actually for:
# Kamailio (OpenSER) SIP Server v4.1 - default configuration script
#
# From sample @ http://kamailio.org/docs/modules/4.1.x/modules/dispatcher.html#idp1879032
# Which was based on:
# Kamailio (OpenSER) SIP Server v3.2
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: sr-users@lists.sip-router.org
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#

#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

# log_facility=LOG_LOCAL0
# Ds increasing debug...
debug=2

fork=yes
children=4

/* comment the next line to enable TCP */
# disable_tcp=yes

/* SIP requires a Content-Length header for TCP transport.
   But most HTTP clients do not set the content length for normal GET requests.
   Therefore, the core must be configured to allow incoming requests without content length header */
tcp_accept_no_cl=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on revers DNS on IPs (default on) */
auto_aliases=no

/* add local domain aliases */
# alias="mysipserver.com"

port=5060

/* uncomment and configure the following line if you want Kamailio to
   bind on a specific interface/port/proto (default bind on all available) */
# listen=udp:0.0.0.0:5060
# listen=127.0.0.1:5060

sip_warning=no

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "jsonrpcs.so"
loadmodule "xhttp.so"
loadmodule "acc.so"
loadmodule "dispatcher.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "http_client.so"
# loadmodule "mangler.so"
loadmodule "nathelper.so"


# ----------------- setting module-specific parameters ---------------

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- acc params -----
modparam("acc", "log_flag", 1)
modparam("acc", "failed_transaction_flag", 3)
modparam("acc", "log_extra",
  "src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;src_ip=$si")

# ----- tm params -----
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 40000)

# ----- jsonrpcs params -----
modparam("jsonrpcs", "transport", 1)

# ----- dispatcher params -----
# modparam("dispatcher", "db_url", DBURL)
# modparam("dispatcher", "table_name", "dispatcher")

modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "xavp_dst", "_dsdst_")
modparam("dispatcher", "xavp_ctx", "_dsctx_")
modparam("dispatcher", "ds_ping_from", "sip:proxy@kamailio.org")
modparam("dispatcher", "ds_ping_interval", 60)
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_timer_mode", 1)

modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 15)
modparam("dispatcher", "ds_probing_threshold", 1)
modparam("dispatcher", "ds_ping_reply_codes", "class=2;class=3;class=4")

# ----- http_client params -----
modparam("http_client", "httpcon", "apiserver=>http://192.168.188.111:8080/api");

####### Routing Logic ########

event_route[xhttp:request] {
	if ($hu =~ "^/RPC") {
		jsonrpc_dispatch();
	} else {
    xhttp_reply("400", "Bad Request", "application/json",
        "{\"status\":400}");
  }
  return;
}

# main request routing logic

route {

  # xlog("L_ERR", "incoming-request:\n$mb\n");

  # per request initial checks
  route(REQINIT);

#  if(nat_uac_test("3")) {
#    force_rport();
#    if(is_method("INVITE|REGISTER|SUBSCRIBE")){
#      set_contact_alias();
#    }
#  }

  # handle requests within SIP dialogs
  route(WITHINDLG);

  ### only initial requests (no To tag)

  # CANCEL processing
  if (is_method("CANCEL"))
  {
    if (t_check_trans())
      t_relay();
    exit;
  }

  t_check_trans();

  if (nat_uac_test("2")) {
    xlog("L_ERR", "NAT TEST TRUE\n\n");
  }
  # fix_nated_sdp("3", "192.168.188.1");

  # record routing for dialog forming requests (in case they are routed)
  # - remove preloaded route headers
  remove_hf("Route");
  if (is_method("INVITE|SUBSCRIBE")) {
    record_route();
  }

  # account only INVITEs
  if (is_method("INVITE"))
  {
     setflag(1); # do accounting
     # if ($si == "192.168.188.1") {
       # subst_hf("From", "/127.0.0.1/192.168.188.1:5061/", "a");
     # }

     if ($si == "192.168.188.1") {
       xlog("L_ERR", "request->FIXING NATED SDP");
       fix_nated_sdp("3", "192.168.188.1");
     }

     xlog("L_ERR", "INVITE: si:$si rU:$rU mbu:\n$mbu\n\n");
     if(ds_is_from_list() || ($si == "192.168.188.1" && $rU != "6000" && $rU != "23")) {
      #
      # lookup("location");
      if ($rU == "1002") {
        $ru = "sip:1002@192.168.188.1:5062;ob";
#         rewritehostport("192.168.188.1:5062");
#         remove_hf("To");
#         insert_hf("To: sip:192.168.188.1:5062\n", "To");
      }
#       if ($rU == "1001") {
#         $ru = "sip:1001@192.168.188.1:5061;ob";
#         rewritehostport("192.168.188.1:5061");
#         remove_hf("To");
#         insert_hf("To: sip:192.168.188.1:5061\n", "To");
#       }
      xlog("L_ERR", "in invite|subscribe $si $rU \n$mbu\n\n");
      route(RELAY);
     }
  }

  if ($rU == "1002") {
      xlog("L_ERR", "GOT RU: $si $rU $rm");
      $ru = "sip:1002@192.168.188.1:5062;ob";
#     rewritehostport("192.168.188.1:5062");
#     remove_hf("To");
#     insert_hf("To: sip:192.168.188.1:5062\n", "To");
      route(RELAY);
  }
  if ($rU == "1001") {
      xlog("L_ERR", "GOT RU: $si $rU $rm");
      $ru = "sip:1001@192.168.188.1:5061;ob";
#     rewritehostport("192.168.188.1:5061");
#     remove_hf("To");
#     insert_hf("To: sip:192.168.188.1:5061\n", "To");
      route(RELAY);
  }

  # handle registrations
  route(REGISTRAR);

  # if(ds_is_from_list()) {
  #   route(LOCATION);
  # }

  # dispatch destinations
  route(DISPATCH);

  # handle presence related requests
  route(PRESENCE);

  if ($rU==$null)
  {
    # request with no Username in RURI
    sl_send_reply("484","Address Incomplete");
    exit;
  }

}

reply_route {
#  if (is_method("INVITE")) {
#    subst_hf("To", "/1001@192.168.188.110/1001@192.168.188.1:5061/", "a");
#    subst_hf("To", "/1002@192.168.188.110/1002@192.168.188.1:5062/", "a");
#  }
#  if ($si == "192.168.188.1") {
    #xlog("L_ERR", "reply->FIXING NATED SDP");
    #fix_nated_sdp("3", "192.168.188.111");
#  }
#   $ru = "sip:1001@192.168.188.1:5061;ob";
#   rewritehostport("192.168.188.1:5061");
#   remove_hf("To");
#   insert_hf("To: sip:192.168.188.1:5061\n", "To");
#   sdp_mangle_ip("192.168.1.0/24", "192.168.188.1");
  xlog("L_ERR", "incoming-response: si: $si du: $du rU: $rU ru: $ru \n$mbu\n");
}

route[RELAY] {
  if (!t_relay()) {
    sl_reply_error();
  }
  exit;
}

# Per SIP request initial checks
route[REQINIT] {
  if (!mf_process_maxfwd_header("10")) {
    sl_send_reply("483","Too Many Hops");
    exit;
  }

  if(!sanity_check("1511", "7"))
  {
    xlog("Malformed SIP message from $si:$sp\n");
    exit;
  }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
  if (has_totag()) {
    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
      if (is_method("BYE")) {
        setflag(1); # do accounting ...
        setflag(3); # ... even if the transaction fails
      }
      route(RELAY);
    } else {
      if (is_method("SUBSCRIBE") && uri == myself) {
        # in-dialog subscribe requests
        route(PRESENCE);
        exit;
      }
      if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
          # non loose-route, but stateful ACK;
          # must be ACK after a 487 or e.g. 404 from upstream server
          t_relay();
          exit;
        } else {
          # ACK without matching transaction ... ignore and discard.
          exit;
        }
      }
      sl_send_reply("404","Not here");
    }
    exit;
  }
}

route[LOCATION] {
  xlog("L_INFO", "route_location\n");
	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	if (!t_load_contacts() || !t_next_contacts()) {
		xlog("L_ERR", "t_(load|next)_contacts() failed\n");
		sl_reply_error();
		exit;
	}

  # handle_ruri_alias();

	t_on_failure("FAIL_TRANSACTION");
	t_on_branch_failure("FAIL-BRANCH");
	route(RELAY);
	exit;
}

# Handle SIP registrations
route[REGISTRAR] {
  if(!is_method("REGISTER"))
    return;
  save("location");
  # $var(res) = http_connect("apiserver", "broadcast/workers/$ru", "application/json", '{ "name": "UpdateWorkerRegistration", "connected": true, "workerId": "$(ct{tobody.uri})", "address": "$(ct{tobody.uri})" }', "$avp(gurka)");
  # xlog("L_INFO", "API-server HTTP connection: $avp(gurka) Result code $var(res)\n");
  # sl_send_reply("404", "No registrar");
  exit;
}

# Presence server route
route[PRESENCE] {
  if(!is_method("PUBLISH|SUBSCRIBE"))
    return;

  sl_send_reply("404", "Not here");
  exit;
}

# Dispatch requests
route[DISPATCH] {
  # Destination types:
  # http://kamailio.org/docs/modules/4.2.x/modules/dispatcher.html#dispatcher.f.ds_select_dst
  # 4 = round robin
  # 9 = weight-based
  # round robin dispatching on gateways group '1'
  if(!ds_select_dst("1", "9"))
  {
    send_reply("404", "No destination");
    exit;
  }

  t_set_fr(0,2000);
  t_on_failure("ROUTE_ADVANCE");

#   if (is_method("INVITE")) {
#     if (!ds_is_from_list()) {
#       route(RELAY);
#       exit;
#     }
#   } else {
#     route(RELAY);
#     exit;
#   }

  route(RELAY);
  exit;
}

event_route[dispatcher:dst-down] {
  xlog("L_ERR", "Destination down: $rm $ru ($du)\n");
}

event_route[dispatcher:dst-up] {
  xlog("L_ERR", "Destination up: $rm $ru\n");
}

failure_route[ROUTE_ADVANCE] {

  if (t_is_canceled()) {
    exit;
  }

  xlog("L_NOTICE", "Media server $du failed to answer, selecting other one!\n");

  if (t_check_status("503") || (t_branch_timeout() and !t_branch_replied())) {

    ds_mark_dst("ip");
    # select the new destination
    if(ds_next_dst())
    {
      # again set local timeout for reply
      # xlog("L_NOTICE", "Selecting next route upon failure\n");
      t_set_fr(0,2000);
      t_on_failure("ROUTE_ADVANCE");
      route(RELAY);
      exit;
    }
    else
    {
      #last available node failed to reply, no other destinations available
      send_reply("404", "No destination");
      xlog("L_NOTICE","No destination, sent 404\n");
      exit;
    }

  } else {
    xlog("L_NOTICE","Unhandled failed route! - $T(reply_code)\n");
  }

}